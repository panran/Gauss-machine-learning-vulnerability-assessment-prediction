# -*- coding: utf-8 -*-
import pandas as pd
from sklearn.gaussian_process import GaussianProcessClassifier
from sklearn.gaussian_process.kernels import (RBF, Matern, RationalQuadratic,
                                              ExpSineSquared, DotProduct,
                                              ConstantKernel)

def data_handle(filename):
    read_data = pd.read_csv(filename)
    list_datasets = []
    category_labels = []
    for i in range(len(read_data)):
        list_data = []
        for j in range(len(read_data.iloc[i, :]) - 1):
            row_data = read_data.iloc[i, j]  # 读取每个样本的每个数据
            list_data.append(row_data)  #将每个数据存入列表
        list_datasets.append(list_data)  #将每个样本的数据存入列表

        row_data_label = read_data.iloc[i, len(read_data.iloc[i, :]) - 1]  # 读取每个样本的类别标签
        if row_data_label == 'N':
            category_labels.append(0)  # 将二分类标签转化为0和1,0代表软件正常，1代表软件缺陷
        else:
            category_labels.append(1)
   # print(list_datasets[0:3])
   # print(category_labels)
    return list_datasets, category_labels
    #返回样本数据和标签

def GP_Model(dataSet, data_Label):
    kernels = [1.0 * RBF(length_scale=1.0, length_scale_bounds=(1e-1, 10.0)),
               1.0 * RationalQuadratic(length_scale=1.0, alpha=0.1),
               1.0 * ExpSineSquared(length_scale=1.0, periodicity=3.0, length_scale_bounds=(0.1, 10.0),
                                    periodicity_bounds=(1.0, 10.0)),
               ConstantKernel(0.1, (0.01, 10.0)) * (DotProduct(sigma_0=1.0, sigma_0_bounds=(0.1, 10.0)) ** 2),
               1.0 * Matern(length_scale=1.0, length_scale_bounds=(1e-1, 10.0), nu=1.5)]
    gp = GaussianProcessClassifier(kernel = kernels[3])
    gp.fit(dataSet, data_Label)
    #训练数据样本
    return gp


if __name__ == '__main__':
    datasets, labels = data_handle('dataSet/MDP/KC4.csv')  # 对数据集进行处理，从数据文件中读取数据
    print('样本数据的条数：',datasets.__len__())
    for (i,l) in zip(datasets,labels):
        print(i,l)

    # 训练集和测试集划分
    X_train = datasets[:115]
    y_train = labels[:115]
    X_test = datasets[90:]
    y_test = labels[90:]

    gp = GP_Model(X_train, y_train)

    print('预测结果：')
    print(gp.predict_proba(X_test))
    print('预测标签：')
    print(gp.predict(X_test))


    print('实际结果：')
    print(y_test)




